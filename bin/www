#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("authentication-nodejs:server");
var http = require("http");
const mongoose = require("mongoose");
const config = require("../config/config");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.port || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Connect to MongoDB.
 */
function connectToMongoDB() {
  return mongoose.connect(config.mongoose.uri, config.mongoose.options);
}

mongoose.connection
  .on("error", (err) => {
    console.error(`MongoDB connection error: ${err}`);
    process.exit(1);
  })
  .on("disconnected", connectToMongoDB)
  .once("open", () => {
    console.info("Connected to MongoDB");
  });

mongoose.connect(config.mongoose.uri, config.mongoose.options);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.info(`Express server listening on port ${config.port}`);
});

server.on("error", onError);

server.on("listening", onListening);

// connectToMongoDB();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    // case "SIGTERM":
    //   console.info("SIGTERM received");
    //   if (server) {
    //     server.close();
    //   }
    //   break;
    // case "uncaughtException":
    // case "unhandledRejection":
    //   console.error(error);
    //   exitHandler();
    //   break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Exit handler
 */

function exitHandler() {
  if (server) {
    server.close(() => {
      console.info("API server closed");
      mongoose.disconnect(() => {
        console.info("MongoDB disconnected");
        process.exit(1);
      });
    });
  } else {
    process.exit(1);
  }
}
